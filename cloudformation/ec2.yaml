AWSTemplateFormatVersion: "2010-09-09"

Description: "AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template."

Metadata:
  License: Apache-2.0

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.

  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  SourceCodeBucketName:
    Description: Source Code Bucket Name
    Type: String

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: InstanceProfile
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # https://stackoverflow.com/questions/54415841/nodejs-not-installed-successfully-in-aws-ec2-inside-user-data
          export HOME=~
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
          source ~/.bashrc
          nvm install 16
          nvm use 16
          cd ~/
          aws s3 cp s3://${SourceCodeBucketName}/web-tier/ web-tier --recursive
          cd ~/web-tier
          npm install 
          npm run build
          mkdir /var/www /var/www/html /var/www/html/web-tier
          cp -r ~/web-tier/build /var/www/html/web-tier/
          sudo amazon-linux-extras install nginx1 -y
          cd /etc/nginx
          sudo rm nginx.conf
          sudo aws s3 cp s3://${SourceCodeBucketName}/nginx.conf .
          sudo service nginx restart
          chown -R ec2-user /var/www/html/web-tier
          chmod -R 755 /var/www/html/web-tier
          sudo chkconfig nginx on

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  S3AccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref S3AccessRole

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance

  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt EC2Instance.AvailabilityZone

  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt EC2Instance.PublicDnsName

  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
